stages:
  - lint
  - test
  - publish

# variable to register in project:
# - PYPI_USERNAME: pypi username for package upload
# - PYPI_PASSWORD: pypi password for package upload

workflow:
  rules:
    - if: '$CI_MERGE_REQUEST_ID'
      when: always
    # - if: $CI_COMMIT_REF_PROTECTED != "true"
    #   when: never
    # only publish package if tag is a pypi compatible version (see long regex, extracted from PEP440) 
    # open-source if tag is not post- nor pre-release  
    - if: $CI_COMMIT_TAG != null && $CI_COMMIT_TAG =~ /^v?(?:[0-9]+!)?[0-9]+(?:\.[0-9]+)*$/
      variables:
        PUBLISH_PYTHON_PACKAGE: "true"
        IS_OPEN_SOURCE_RELEASE_CANDIDATE: "true"
    - if: $CI_COMMIT_TAG != null && $CI_COMMIT_TAG =~ /^v?((?:[0-9]+!)?[0-9]+(?:\.[0-9]+)*(?:[-_\.]?(?:a|b|c|rc|alpha|beta|pre|preview)[-_\.]?(?:[0-9]+)?)?(?:-[0-9]+|[-_\.]?(?:post|rev|r)[-_\.]?(?:[0-9]+)?)?(?:[-_\.]?dev[-_\.]?(?:[0-9]+)?)?)(?:\+[a-z0-9]+(?:[-_\.][a-z0-9]+)*)?$/
      variables:
        PUBLISH_PYTHON_PACKAGE: "true"
        IS_OPEN_SOURCE_RELEASE_CANDIDATE: "false"
    - if: $CI_COMMIT_TAG == null || $CI_COMMIT_TAG !~ /^v?((?:[0-9]+!)?[0-9]+(?:\.[0-9]+)*(?:[-_\.]?(?:a|b|c|rc|alpha|beta|pre|preview)[-_\.]?(?:[0-9]+)?)?(?:-[0-9]+|[-_\.]?(?:post|rev|r)[-_\.]?(?:[0-9]+)?)?(?:[-_\.]?dev[-_\.]?(?:[0-9]+)?)?)(?:\+[a-z0-9]+(?:[-_\.][a-z0-9]+)*)?$/
      variables:
        PUBLISH_PYTHON_PACKAGE: "false"
        IS_OPEN_SOURCE_RELEASE_CANDIDATE: "false"

lint-python:
  stage: lint
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:${PYTHON_VERSION}
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8", "3.9", "3.10"]
  before_script:
    - python3 -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pylint pytest
  script:
    - pylint --output=lint.txt cytomine tests
  artifacts:
    paths:
      - ./lint.txt
    expire_in: 1 week

.run-pytest-generic: &run-pytest-generic
  stage: test
  image: python:$PY_VERSION-slim-bullseye
  script:
    - pip install -r requirements.txt
    - pip install pytest
    # Only run unit tests
    # TODO run integration tests (need to spawn a clean cytomine for each run-pytest*)
    - pytest tests/test_pattern_matching.py --junit-xml=ci/test-reports/pytest_unit.xml
  artifacts:
    reports:
      junit: ci/tests-reports/pytest_unit.xml

run-pytest-python3.7:
  <<: *run-pytest-generic
  variables:
    PY_VERSION: "3.7"

run-pytest-python3.8:
  <<: *run-pytest-generic
  variables:
    PY_VERSION: "3.8"

run-pytest-python3.9:
  <<: *run-pytest-generic
  variables:
    PY_VERSION: "3.9"

publish-python-package:
  image: python:3.8-slim-bullseye
  stage: publish
  rules:
    - if: $PUBLISH_PYTHON_PACKAGE == "true"
  needs:
    - job: run-pytest-python3.7
      artifacts: false
    - job: run-pytest-python3.8
      artifacts: false
    - job: run-pytest-python3.9
      artifacts: false
  script:
    - pip install twine
    - sed -i -- "s/version='x.x.x'/version='$CI_COMMIT_TAG'/g" setup.py
    - python setup.py sdist
    - |
      if [ $IS_OPEN_SOURCE_RELEASE_CANDIDATE = "true" ]; then
        export TARGET_PYTHON_REPO=https://upload.pypi.org/legacy/
        export TWINE_USERNAME=$PYPI_USERNAME
        export TWINE_PASSWORD=$PYPI_PASSWORD
      else
        export TARGET_PYTHON_REPO=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
        export TWINE_USERNAME=gitlab-ci-token
        export TWINE_PASSWORD=$CI_JOB_TOKEN
      fi
    - twine upload dist/cytomine-python-client-*.tar.gz --repository-url $TARGET_PYTHON_REPO
